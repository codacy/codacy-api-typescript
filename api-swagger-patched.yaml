swagger: '2.0'

info:
  version: 3.0.0
  title: Website API
  description: >-
    Shiny new Codacy API
  contact:
    name: Codacy Team
    email: code@codacy.com
    url: https://www.codacy.com
  license:
    name: Codacy. All rights reserved
    url: https://www.codacy.com

schemes:
  - http

host: app.codacy.com

basePath: /v3

produces:
  - application/json
consumes:
  - application/json

definitions:
  Visibility:
    type: string
    x-ms-enum:
      name: "Visibility"
    enum: &visibilityEnum
      - Public
      - Private
      - LoginPublic

  Provider:
    type: string
    x-ms-enum:
      name: "Provider"
    enum: &providerEnum
      - manual
      - bb
      - bbe
      - gh
      - ghe
      - gl
      - gle

  AccountProvider:
    type: string
    x-ms-enum:
      name: "AccountProvider"
    enum: &accountProviderEnum
      - github-enterprise
      - github
      - google
      - bitbucket
      - bitbucket-server
      - gitlab
      - gitlab-enterprise

  JoinMode:
    type: string
    x-ms-enum:
      name: "JoinMode"
    enum:
      - auto
      - adminAuto
      - request

  HealthCheck:
    type: object
    properties:
      message:
        type: string
    example:
      message: "Hello, it's me"

  HealthCheckResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/HealthCheck"

  PaginationInfo:
    type: object
    properties:
      cursor:
        type: string
      limit:
        type: integer
        format: int32
      total:
        type: integer
        format: int32

  User:
    type: object
    required:
      - id
      - username
      - mainEmail
      - otherEmails
      - isAdmin
      - isActive
      - created
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      name:
        type: string
      mainEmail:
        type: string
      otherEmails:
        type: array
        items:
          type: string
      isAdmin:
        type: boolean
      isActive:
        type: boolean
      created:
        type: string
        format: date-time
        x-scala-type: java.time.Instant
      intercomHash:
        type: string
    example:
      username: "FooBar"
      name: "Foo"
      mainEmail: "main@codacy.com"
      otherEmails: ["foo@bar.com"]
      isAdmin: false
      isActive: true
      created: "2019-05-07T14:29:13.430Z"
      intercomHash: "userhash"

  UserResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/User"

  UserBody:
    type: object
    properties:
      username:
        type: string
      name:
        type: string
    example:
      username: "FooBar"
      name: "Foo"

  ChangePasswordBody:
    type: object
    required:
      - currentPassword
      - newPassword
    properties:
      currentPassword:
        type: string
      newPassword:
        type: string
    example:
      currentPassword: "current_pass"
      newPassword: "new_pass"

  Organization:
    type: object
    required:
      - name
      - billingEmail
      - provider
    properties:
      name:
        type: string
      billingEmail:
        type: string
      avatar:
        type: string
      created:
        type: string
        format: date-time
        x-scala-type: java.time.Instant
      provider:
        $ref: '#/definitions/Provider'
      joinMode:
        $ref: '#/definitions/JoinMode'
    example:
      name: "FooOrganization"
      billingEmail: "billing@codacy.com"
      avatar: "someRandomLink.com"
      created: "2019-05-07T14:29:13.430Z"
      provider: "gh"
      joinMode: "auto"

  OrganizationListResponse:
    type: object
    required:
      - data
    properties:
      pagination:
        $ref: "#/definitions/PaginationInfo"
      data:
        type: array
        items:
          $ref: "#/definitions/Organization"

  Integration:
    type: object
    required:
      - provider
      - lastAuthenticated
    properties:
      provider:
        $ref: "#/definitions/AccountProvider"
      lastAuthenticated:
        type: string
        format: date-time
        x-scala-type: java.time.Instant
    example:
      name: "FooOrganization"
      lastTimeAuthenticated: "2019-05-07T14:29:13.430Z"

  IntegrationListResponse:
    type: object
    required:
      - data
    properties:
      pagination:
        $ref: "#/definitions/PaginationInfo"
      data:
        type: array
        items:
          $ref: "#/definitions/Integration"

  Repository:
    type: object
    required:
      - owner
      - name
      - visibility
    properties:
      owner:
        type: string
      name:
        type: string
      visibility:
        $ref: "#/definitions/Visibility"
      remoteIdentifier:
        type: string
      lastUpdated:
        type: string
        format: date-time
        x-scala-type: java.time.Instant
    example:
      owner: "codacy"
      name: "codacy-eslint"
      visibility: "Private"
      remoteIdentifier: 3
      lastUpdated: "2019-05-07T14:29:13.430Z"

  RepositoryListResponse:
    type: object
    required:
      - data
    properties:
      pagination:
        $ref: "#/definitions/PaginationInfo"
      data:
        type: array
        items:
          $ref: "#/definitions/Repository"

  ApiToken:
    type: object
    required:
      - id
      - token
    properties:
      id:
        type: integer
        format: int64
      token:
        type: string

  ApiTokenListResponse:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/ApiToken"

  ApiErrorCode:
    type: string
    enum:
      - BadRequest
      - Unauthorized
      - Forbidden
      - NotFound
      - InternalServerError

  ApiError:
    type: object
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        $ref: "#/definitions/ApiErrorCode"

  BadRequestResponse: #400
    description: BadRequest
    allOf:
      - $ref: "#/definitions/ApiError"

  UnauthorizedResponse: #401
    description: Unauthorized
    allOf:
      - $ref: "#/definitions/ApiError"

  ForbiddenResponse: #403
    description: Forbidden
    allOf:
      - $ref: "#/definitions/ApiError"

  NotFoundResponse: #404
    description: Not found
    allOf:
      - $ref: "#/definitions/ApiError"

  InternalServerErrorResponse: #500
    description: Internal Server Error
    allOf:
      - $ref: "#/definitions/ApiError"

parameters:
  cursorParam:
    in: query
    name: cursor
    required: false
    type: string
    description: "Cursor to list elements after."
    x-example: "Yms345gh=="
    x-ms-parameter-location: 'method'

  limitParam:
    in: query
    name: limit
    required: false
    type: integer
    format: int32
    minimum: 1
    maximum: 100
    default: 100
    description: "Number of items to return."
    x-example: 20
    x-ms-parameter-location: 'method'

  accountProviderParam:
    in: path
    name: provider
    description: "Account Provider"
    required: true
    type: string
    enum: *accountProviderEnum
    x-ms-enum:
      name: "AccountProvider"
    x-example: github
    x-ms-parameter-location: 'method'

  tokenIdParam:
    in: path
    name: tokenId
    description: "Token ID"
    required: true
    type: integer
    format: int64
    x-example: 30
    x-ms-parameter-location: 'method'

  searchParam:
    in: query
    name: search
    required: false
    type: string
    description: Filter the results searching by this string.
    x-example: "my-repository-name"
    x-ms-parameter-location: 'method'

  remoteOrganizationNameParam: 
    in: path
    name: remoteOrganizationName
    description: 'Remote organization name'
    required: true
    type: string
    x-example: "codacy"
    x-ms-parameter-location: 'method'

  providerParam:
    in: path
    name: provider
    description: "Provider"
    required: true
    type: string
    enum: *providerEnum
    x-ms-enum:
      name: "Provider"
    x-example: gh
    x-ms-parameter-location: 'method'

paths:
  /user:
    get:
      tags:
        - account
      summary: Get the authenticated user
      description: Get the authenticated user
      operationId: getUser
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/UserResponse'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
    delete:
      tags:
        - account
      operationId: deleteUser
      parameters:
        - in: body
          name: "ReasonsToDelete"
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '204':
          description: 'Successful operation'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
    patch:
      tags:
        - account
      operationId: patchUser
      parameters:
        - in: body
          name: "UserBody"
          required: true
          schema:
            $ref: "#/definitions/UserBody"
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/UserResponse'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /user/orgs:
    get:
      tags:
        - account
      summary: List organizations for the authenticated user
      description: List organizations for the authenticated user
      operationId: listUserOrganizations
      parameters:
        - $ref: '#/parameters/cursorParam'
        - $ref: '#/parameters/limitParam'
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/OrganizationListResponse'
        '400':
          description: 'Bad Request'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /user/integrations:
    get:
      tags:
        - account
      summary: List integrations for the authenticated user
      description: List integrations for the authenticated user
      operationId: listUserIntegrations
      parameters:
        - $ref: '#/parameters/cursorParam'
        - $ref: '#/parameters/limitParam'
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/IntegrationListResponse'
        '400':
          description: 'Bad Request'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '401':
          description: 'Unauthorized'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /user/integrations/{provider}:
    delete:
      tags:
        - account
      operationId: deleteIntegration
      parameters:
        - $ref: '#/parameters/accountProviderParam'
      responses:
        '204':
          description: 'Successful operation'
        '400':
          description: 'Bad Request'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: 'Not Found'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /user/repositories:
    get:
      tags:
        - account
      summary: List personal manual repositories for the authenticated user
      description: List personal manual repositories for the authenticated user
      operationId: listPersonalRepositories
      parameters:
        - $ref: '#/parameters/cursorParam'
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/searchParam'
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/RepositoryListResponse'
        '400':
          description: 'Bad Request'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /organizations/{provider}/{remoteOrganizationName}/repositories:
    get:
      tags:
        - organization
      summary: List an organization repositories for the authenticated user
      description: List an organization repositories for the authenticated user
      operationId: listOrganizationRepositories
      parameters:
        - $ref: '#/parameters/providerParam'
        - $ref: '#/parameters/remoteOrganizationNameParam'
        - $ref: '#/parameters/cursorParam'
        - $ref: '#/parameters/limitParam'
        - $ref: '#/parameters/searchParam'
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/RepositoryListResponse'
        '400':
          description: 'Bad Request'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: 'Not Found'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /user/tokens:
    get:
      tags:
        - account
      summary: Get the authenticated user's API Tokens
      description: Get the authenticated user's API Tokens
      operationId: getUserApiTokens
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/ApiTokenListResponse'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
    post:
      tags:
        - account
      summary: Create an API Token for the authenticated user
      description: Create an API Token for the authenticated user
      operationId: createUserApiToken
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/ApiToken'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /user/tokens/{tokenId}:
    delete:
      tags:
        - account
      summary: Delete an API Token of the authenticated user
      description: Delete an API Token of the authenticated user
      operationId: deleteUserApiToken
      parameters:
        - $ref: '#/parameters/tokenIdParam'
      responses:
        '204':
          description: 'Successful operation'
        '404':
          description: 'Not Found'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /user/password:
    post:
      tags:
        - account
      summary: Change the password for the authenticated user
      description: For the authenticated user, validates the current password and changes it to a new one
      operationId: changePassword
      parameters:
        - in: body
          name: "ChangePasswordBody"
          required: true
          schema:
            $ref: "#/definitions/ChangePasswordBody"
      responses:
        '204':
          description: 'Successful operation'
        # This error is thrown when validating the current password
        # At the time of this implementation the team discussed if this should be a 401 Unauthorized:
        #   - This operation validates a password field, implying a security validation on the payload (hence a 401)
        #     - At the same time, 401 is currently used only to encode non-authenticated requests
        #   - 400 can be used as a standard http code for all wrong values in requests
        #     - It also can be seen as too generic given this use case
        # Research on this showed that other APIs return 400 BadRequest in this situation, so we decided for 400
        '400':
          description: 'Bad Request'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: 'Not Found'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /health:
    get:
      tags:
        - health
      summary: Health check endpoint
      description: Health check endpoint
      operationId: health
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/HealthCheckResponse'
          examples:
            application/json: [{ message: "Hello, it's me" }]
