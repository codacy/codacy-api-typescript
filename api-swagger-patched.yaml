swagger: '2.0'

info:
  version: 3.0.0
  title: Website API
  description: >-
    Shiny new Codacy API
  contact:
    name: Codacy Team
    email: code@codacy.com
    url: https://www.codacy.com
  license:
    name: Codacy. All rights reserved
    url: https://www.codacy.com

schemes:
  - http

host: app.codacy.com

basePath: /v3

produces:
  - application/json
consumes:
  - application/json

# This is the one of the differences to the yaml on codacy website.
# Had to move this to the path definition since it breaks the client spec otherwise
# parameters:
#   providerParam: &providerParam
#     in: path
#     name: provider
#     description: "Git Provider"
#     required: true
#     type: string
#     enum: [gh, ghe, gl, gle, bb, bbe]
#     x-example: gh

paths:
  /user:
    get:
      tags:
        - account
      summary: Get the authenticated user
      description: Get the authenticated user
      operationId: getUser
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/UserResponse'
        '401':
          description: 'Unauthorized'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
    delete:
      tags:
        - account
      operationId: deleteUser
      parameters:
        - in: body
          name: "ReasonsToDelete"
          required: true
          schema:
            type: array
            items:
              type: string
      responses:
        '204':
          description: 'Successful operation'
        '401':
          description: 'Unauthorized'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
    patch:
      tags:
        - account
      operationId: patchUser
      parameters:
        - in: body
          name: "UserBody"
          required: true
          schema:
            $ref: "#/definitions/UserBody"
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/UserResponse'
        '401':
          description: 'Unauthorized'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'


  /user/orgs:
    get:
      tags:
        - account
      summary: List organizations for the authenticated user
      description: List organizations for the authenticated user
      operationId: listUserOrganizations
      responses:
        '200':
          description: 'Successful operation'
          schema:
              $ref: '#/definitions/OrganizationListResponse'
        '401':
          description: 'Unauthorized'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /user/integrations:
    get:
      tags:
        - account
      summary: List integrations for the authenticated user
      description: List integrations for the authenticated user
      operationId: listUserIntegrations
      responses:
        '200':
          description: 'Successful operation'
          schema:
              $ref: '#/definitions/IntegrationListResponse'
        '401':
          description: 'Not Found'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /user/integrations/{provider}:
    delete:
      tags:
        - account
      operationId: deleteIntegration
      parameters:
        - in: path
          name: provider
          description: "Git Provider"
          required: true
          type: string
          enum: [gh, ghe, gl, gle, bb, bbe]
          x-example: gh
      responses:
        '204':
          description: 'Successful operation'
        '401':
          description: 'Unauthorized'
          schema:
            $ref: '#/definitions/ApiError'
        '404':
          description: 'Not Found'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'
        '500':
          description: 'Internal Server Error'
          x-ms-error-response: true
          schema:
            $ref: '#/definitions/ApiError'

  /health:
    get:
      tags:
        - health
      summary: Health check endpoint
      description: Health check endpoint
      operationId: health
      responses:
        '200':
          description: 'Successful operation'
          schema:
            $ref: '#/definitions/HealthCheckResponse'
          examples:
            application/json: [{ message: "Hello, it's me" }]

definitions:
  HealthCheck:
    type: object
    properties:
      message:
        type: string
    example:
      message: "Hello, it's me"

  HealthCheckResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/HealthCheck"

  User:
    type: object
    required:
      - username
      - mainEmail
      - otherEmails
      - isAdmin
      - isActive
      - created
    properties:
      username:
        type: string
      name:
        type: string
      mainEmail:
        type: string
      otherEmails:
        type: array
        items:
          type: string
      isAdmin:
        type: boolean
      isActive:
        type: boolean
      created:
        type: integer
        format: int64
        x-scala-type: java.time.Instant
    example:
      username: "FooBar"
      name: "Foo"
      mainEmail: "main@codacy.com"
      otherEmails: ["foo@bar.com"]
      isAdmin: false
      isActive: true
      created: "2019-05-07T14:29:13.430Z"

  UserResponse:
    type: object
    required:
      - data
    properties:
      data:
        $ref: "#/definitions/User"

  UserBody:
    type: object
    properties:
      username:
        type: string
      name:
        type: string
    example:
      username: "FooBar"
      name: "Foo"

  Organization:
    type: object
    required:
      - name
      - billingEmail
      - provider
    properties:
      name:
        type: string
      billingEmail:
        type: string
      avatar:
        type: string
      createdAt:
        type: integer
        format: int64
        x-scala-type: java.time.Instant
      provider:
        $ref: '#/definitions/Provider'
      joinMode:
        $ref: '#/definitions/JoinMode'
    example:
      name: "FooOrganization"
      billingEmail: "billing@codacy.com"
      avatar: "someRandomLink.com"
      created: "2019-05-07T14:29:13.430Z"
      provider: "gh"
      joinMode: "auto"

  OrganizationListResponse:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Organization"

  Integration:
    type: object
    required:
      - name
      - lastTimeAuthenticated
    properties:
      name:
        type: string
      lastTimeAuthenticated:
        type: integer
        format: int64
        x-scala-type: java.time.Instant
    example:
      name: "FooOrganization"
      lastTimeAuthenticated: "2019-05-07T14:29:13.430Z"

  IntegrationListResponse:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: "#/definitions/Integration"

  Provider:
    type: string
    enum:
      - manual
      - bb
      - bbe
      - gh
      - ghe
      - gl
      - gle

  JoinMode:
    type: string
    enum:
      - auto
      - adminAuto
      - request

  ApiErrorCode:
    type: string
    enum:
      - Unauthorized
      - Forbidden
      - NotFound
      - InternalServerError

  ApiError:
    type: object
    required:
      - message
      - code
    properties:
      message:
        type: string
      code:
        $ref: "#/definitions/ApiErrorCode"

  UnauthorizedResponse: #401
    description: Unauthorized
    allOf:
      - $ref: "#/definitions/ApiError"

  ForbiddenResponse: #403
    description: Forbidden
    allOf:
      - $ref: "#/definitions/ApiError"

  NotFoundResponse: #404
    description: Not found
    allOf:
      - $ref: "#/definitions/ApiError"

  InternalServerErrorResponse: #500
    description: Internal Server Error
    allOf:
      - $ref: "#/definitions/ApiError"
