/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const HealthCheck: msRest.CompositeMapper = {
  serializedName: "HealthCheck",
  type: {
    name: "Composite",
    className: "HealthCheck",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const User: msRest.CompositeMapper = {
  serializedName: "User",
  type: {
    name: "Composite",
    className: "User",
    modelProperties: {
      username: {
        required: true,
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      mainEmail: {
        required: true,
        serializedName: "mainEmail",
        type: {
          name: "String"
        }
      },
      otherEmails: {
        required: true,
        serializedName: "otherEmails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isAdmin: {
        required: true,
        serializedName: "isAdmin",
        type: {
          name: "Boolean"
        }
      },
      isActive: {
        required: true,
        serializedName: "isActive",
        type: {
          name: "Boolean"
        }
      },
      created: {
        required: true,
        serializedName: "created",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PaginationInfo: msRest.CompositeMapper = {
  serializedName: "PaginationInfo",
  type: {
    name: "Composite",
    className: "PaginationInfo",
    modelProperties: {
      nextCursor: {
        serializedName: "nextCursor",
        type: {
          name: "String"
        }
      },
      prevCursor: {
        serializedName: "prevCursor",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      total: {
        serializedName: "total",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UsersListResponse: msRest.CompositeMapper = {
  serializedName: "UsersListResponse",
  type: {
    name: "Composite",
    className: "UsersListResponse",
    modelProperties: {
      pagination: {
        serializedName: "pagination",
        type: {
          name: "Composite",
          className: "PaginationInfo"
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "User"
            }
          }
        }
      }
    }
  }
};

export const UserResponse: msRest.CompositeMapper = {
  serializedName: "UserResponse",
  type: {
    name: "Composite",
    className: "UserResponse",
    modelProperties: {
      data: {
        serializedName: "data",
        type: {
          name: "Composite",
          className: "User"
        }
      }
    }
  }
};

export const UserBody: msRest.CompositeMapper = {
  serializedName: "UserBody",
  type: {
    name: "Composite",
    className: "UserBody",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Organization: msRest.CompositeMapper = {
  serializedName: "Organization",
  type: {
    name: "Composite",
    className: "Organization",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      billingEmail: {
        required: true,
        serializedName: "billingEmail",
        type: {
          name: "String"
        }
      },
      avatar: {
        serializedName: "avatar",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "Number"
        }
      },
      provider: {
        required: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      joinMode: {
        serializedName: "joinMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OrganizationsListResponse: msRest.CompositeMapper = {
  serializedName: "OrganizationsListResponse",
  type: {
    name: "Composite",
    className: "OrganizationsListResponse",
    modelProperties: {
      pagination: {
        serializedName: "pagination",
        type: {
          name: "Composite",
          className: "PaginationInfo"
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Organization"
            }
          }
        }
      }
    }
  }
};

export const OrganizationResponse: msRest.CompositeMapper = {
  serializedName: "OrganizationResponse",
  type: {
    name: "Composite",
    className: "OrganizationResponse",
    modelProperties: {
      data: {
        serializedName: "data",
        type: {
          name: "Composite",
          className: "Organization"
        }
      }
    }
  }
};

export const Integration: msRest.CompositeMapper = {
  serializedName: "Integration",
  type: {
    name: "Composite",
    className: "Integration",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      lastTimeAuthenticated: {
        required: true,
        serializedName: "lastTimeAuthenticated",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IntegrationsListResponse: msRest.CompositeMapper = {
  serializedName: "IntegrationsListResponse",
  type: {
    name: "Composite",
    className: "IntegrationsListResponse",
    modelProperties: {
      pagination: {
        serializedName: "pagination",
        type: {
          name: "Composite",
          className: "PaginationInfo"
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Integration"
            }
          }
        }
      }
    }
  }
};

export const IntegrationResponse: msRest.CompositeMapper = {
  serializedName: "IntegrationResponse",
  type: {
    name: "Composite",
    className: "IntegrationResponse",
    modelProperties: {
      data: {
        serializedName: "data",
        type: {
          name: "Composite",
          className: "Integration"
        }
      }
    }
  }
};

export const ApiError: msRest.CompositeMapper = {
  serializedName: "ApiError",
  type: {
    name: "Composite",
    className: "ApiError",
    modelProperties: {
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnauthorizedResponse: msRest.CompositeMapper = {
  serializedName: "UnauthorizedResponse",
  type: {
    name: "Composite",
    className: "UnauthorizedResponse",
    modelProperties: {
      ...ApiError.type.modelProperties
    }
  }
};

export const ForbiddenResponse: msRest.CompositeMapper = {
  serializedName: "ForbiddenResponse",
  type: {
    name: "Composite",
    className: "ForbiddenResponse",
    modelProperties: {
      ...ApiError.type.modelProperties
    }
  }
};

export const NotFoundResponse: msRest.CompositeMapper = {
  serializedName: "NotFoundResponse",
  type: {
    name: "Composite",
    className: "NotFoundResponse",
    modelProperties: {
      ...ApiError.type.modelProperties
    }
  }
};
