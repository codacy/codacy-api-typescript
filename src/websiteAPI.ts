/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { WebsiteAPIContext } from "./websiteAPIContext";

class WebsiteAPI extends WebsiteAPIContext {
  /**
   * Initializes a new instance of the WebsiteAPI class.
   * @param [options] The parameter options
   */
  constructor(options?: Models.WebsiteAPIOptions) {
    super(options);
  }

  /**
   * Get the authenticated user
   * @summary Get the authenticated user
   * @param accountId AccountId
   * @param [options] The optional parameters
   * @returns Promise<Models.GetUserResponse>
   */
  getUser(accountId: number, options?: msRest.RequestOptionsBase): Promise<Models.GetUserResponse>;
  /**
   * @param accountId AccountId
   * @param callback The callback
   */
  getUser(accountId: number, callback: msRest.ServiceCallback<Models.UserResponse>): void;
  /**
   * @param accountId AccountId
   * @param options The optional parameters
   * @param callback The callback
   */
  getUser(accountId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserResponse>): void;
  getUser(accountId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserResponse>, callback?: msRest.ServiceCallback<Models.UserResponse>): Promise<Models.GetUserResponse> {
    return this.sendOperationRequest(
      {
        accountId,
        options
      },
      getUserOperationSpec,
      callback) as Promise<Models.GetUserResponse>;
  }

  /**
   * @param reasonsToDelete
   * @param accountId AccountId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteUser(reasonsToDelete: string[], accountId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param reasonsToDelete
   * @param accountId AccountId
   * @param callback The callback
   */
  deleteUser(reasonsToDelete: string[], accountId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param reasonsToDelete
   * @param accountId AccountId
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteUser(reasonsToDelete: string[], accountId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteUser(reasonsToDelete: string[], accountId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        reasonsToDelete,
        accountId,
        options
      },
      deleteUserOperationSpec,
      callback);
  }

  /**
   * @param userBody
   * @param accountId AccountId
   * @param [options] The optional parameters
   * @returns Promise<Models.PatchUserResponse>
   */
  patchUser(userBody: Models.UserBody, accountId: number, options?: msRest.RequestOptionsBase): Promise<Models.PatchUserResponse>;
  /**
   * @param userBody
   * @param accountId AccountId
   * @param callback The callback
   */
  patchUser(userBody: Models.UserBody, accountId: number, callback: msRest.ServiceCallback<Models.UserResponse>): void;
  /**
   * @param userBody
   * @param accountId AccountId
   * @param options The optional parameters
   * @param callback The callback
   */
  patchUser(userBody: Models.UserBody, accountId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.UserResponse>): void;
  patchUser(userBody: Models.UserBody, accountId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.UserResponse>, callback?: msRest.ServiceCallback<Models.UserResponse>): Promise<Models.PatchUserResponse> {
    return this.sendOperationRequest(
      {
        userBody,
        accountId,
        options
      },
      patchUserOperationSpec,
      callback) as Promise<Models.PatchUserResponse>;
  }

  /**
   * List organizations for the authenticated user
   * @summary List organizations for the authenticated user
   * @param accountId AccountId
   * @param [options] The optional parameters
   * @returns Promise<Models.ListUserOrganizationsResponse>
   */
  listUserOrganizations(accountId: number, options?: Models.WebsiteAPIListUserOrganizationsOptionalParams): Promise<Models.ListUserOrganizationsResponse>;
  /**
   * @param accountId AccountId
   * @param callback The callback
   */
  listUserOrganizations(accountId: number, callback: msRest.ServiceCallback<Models.OrganizationsListResponse>): void;
  /**
   * @param accountId AccountId
   * @param options The optional parameters
   * @param callback The callback
   */
  listUserOrganizations(accountId: number, options: Models.WebsiteAPIListUserOrganizationsOptionalParams, callback: msRest.ServiceCallback<Models.OrganizationsListResponse>): void;
  listUserOrganizations(accountId: number, options?: Models.WebsiteAPIListUserOrganizationsOptionalParams | msRest.ServiceCallback<Models.OrganizationsListResponse>, callback?: msRest.ServiceCallback<Models.OrganizationsListResponse>): Promise<Models.ListUserOrganizationsResponse> {
    return this.sendOperationRequest(
      {
        accountId,
        options
      },
      listUserOrganizationsOperationSpec,
      callback) as Promise<Models.ListUserOrganizationsResponse>;
  }

  /**
   * List integrations for the authenticated user
   * @summary List integrations for the authenticated user
   * @param accountId Integration Provider
   * @param [options] The optional parameters
   * @returns Promise<Models.ListUserIntegrationsResponse>
   */
  listUserIntegrations(accountId: number, options?: Models.WebsiteAPIListUserIntegrationsOptionalParams): Promise<Models.ListUserIntegrationsResponse>;
  /**
   * @param accountId Integration Provider
   * @param callback The callback
   */
  listUserIntegrations(accountId: number, callback: msRest.ServiceCallback<Models.IntegrationsListResponse>): void;
  /**
   * @param accountId Integration Provider
   * @param options The optional parameters
   * @param callback The callback
   */
  listUserIntegrations(accountId: number, options: Models.WebsiteAPIListUserIntegrationsOptionalParams, callback: msRest.ServiceCallback<Models.IntegrationsListResponse>): void;
  listUserIntegrations(accountId: number, options?: Models.WebsiteAPIListUserIntegrationsOptionalParams | msRest.ServiceCallback<Models.IntegrationsListResponse>, callback?: msRest.ServiceCallback<Models.IntegrationsListResponse>): Promise<Models.ListUserIntegrationsResponse> {
    return this.sendOperationRequest(
      {
        accountId,
        options
      },
      listUserIntegrationsOperationSpec,
      callback) as Promise<Models.ListUserIntegrationsResponse>;
  }

  /**
   * @param provider Integration Provider
   * @param accountId AccountId
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteIntegration(provider: string, accountId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param provider Integration Provider
   * @param accountId AccountId
   * @param callback The callback
   */
  deleteIntegration(provider: string, accountId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param provider Integration Provider
   * @param accountId AccountId
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteIntegration(provider: string, accountId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteIntegration(provider: string, accountId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        provider,
        accountId,
        options
      },
      deleteIntegrationOperationSpec,
      callback);
  }

  /**
   * Health check endpoint
   * @summary Health check endpoint
   * @param [options] The optional parameters
   * @returns Promise<Models.HealthResponse>
   */
  health(options?: msRest.RequestOptionsBase): Promise<Models.HealthResponse>;
  /**
   * @param callback The callback
   */
  health(callback: msRest.ServiceCallback<Models.HealthCheck>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  health(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HealthCheck>): void;
  health(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HealthCheck>, callback?: msRest.ServiceCallback<Models.HealthCheck>): Promise<Models.HealthResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      healthOperationSpec,
      callback) as Promise<Models.HealthResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "user",
  headerParameters: [
    Parameters.accountId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.UserResponse
    },
    401: {
      bodyMapper: Mappers.UnauthorizedResponse
    },
    500: {
      bodyMapper: Mappers.ApiError
    },
    default: {}
  },
  serializer
};

const deleteUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "user",
  headerParameters: [
    Parameters.accountId
  ],
  requestBody: {
    parameterPath: "reasonsToDelete",
    mapper: {
      required: true,
      serializedName: "ReasonsToDelete",
      type: {
        name: "Sequence",
        element: {
          type: {
            name: "String"
          }
        }
      }
    }
  },
  responses: {
    200: {},
    401: {
      bodyMapper: Mappers.UnauthorizedResponse
    },
    403: {
      bodyMapper: Mappers.ForbiddenResponse
    },
    500: {
      bodyMapper: Mappers.ApiError
    },
    default: {}
  },
  serializer
};

const patchUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "user",
  headerParameters: [
    Parameters.accountId
  ],
  requestBody: {
    parameterPath: "userBody",
    mapper: {
      ...Mappers.UserBody,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.UserResponse
    },
    401: {
      bodyMapper: Mappers.UnauthorizedResponse
    },
    403: {
      bodyMapper: Mappers.ForbiddenResponse
    },
    500: {
      bodyMapper: Mappers.ApiError
    },
    default: {}
  },
  serializer
};

const listUserOrganizationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "user/orgs",
  queryParameters: [
    Parameters.cursor,
    Parameters.limit,
    Parameters.sort,
    Parameters.search
  ],
  headerParameters: [
    Parameters.accountId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationsListResponse
    },
    401: {
      bodyMapper: Mappers.UnauthorizedResponse
    },
    500: {
      bodyMapper: Mappers.ApiError
    },
    default: {}
  },
  serializer
};

const listUserIntegrationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "user/integrations",
  queryParameters: [
    Parameters.cursor,
    Parameters.limit,
    Parameters.sort,
    Parameters.search
  ],
  headerParameters: [
    Parameters.accountId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IntegrationsListResponse
    },
    401: {
      bodyMapper: Mappers.UnauthorizedResponse
    },
    500: {
      bodyMapper: Mappers.ApiError
    },
    default: {}
  },
  serializer
};

const deleteIntegrationOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "user/integrations/{provider}",
  urlParameters: [
    Parameters.provider
  ],
  headerParameters: [
    Parameters.accountId
  ],
  responses: {
    200: {},
    401: {
      bodyMapper: Mappers.UnauthorizedResponse
    },
    404: {
      bodyMapper: Mappers.NotFoundResponse
    },
    500: {
      bodyMapper: Mappers.ApiError
    },
    default: {}
  },
  serializer
};

const healthOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "health",
  responses: {
    200: {
      bodyMapper: Mappers.HealthCheck
    },
    default: {}
  },
  serializer
};

export {
  WebsiteAPI,
  WebsiteAPIContext,
  Models as WebsiteAPIModels,
  Mappers as WebsiteAPIMappers
};
